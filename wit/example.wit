// Instructions for filling in this file:
//
//  - Delete all these `//` comments, up to the first `///` comment.
//
//  - Replace the remaining contents below with [Wit] code describing
//    `interface`s and/or `world`s, using the same formatting style.
//
// If you want to include examples of the API in use, these should be in the
// README.md at the root of the repository and linked to from this file.
//
// [Wit]: https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md

/// Short interface description.
///
/// Explanation for developers using the interface API. It should include an
/// overview of the API as a whole as well as call out notable items in it,
/// for example `example-api-type` and `example-api-function`.
interface example-interface {
    use wasi:example-api-package/example-dep-interface.{example-dep-type}

    /// Short type description
    ///
    /// Explanation for developers using this type. It may be useful to give
    /// some examples of places in the API where the type is used, such as in
    /// the arguments and return type of `example-api-function`.
    ///
    /// <details>
    /// <summary>Detailed specification</summary>
    /// More rigorous specification details for implementers go here, if needed.
    /// The intention is to keep the developer-oriented docs focused on things that
    /// most developers will need to be aware of, while putting bulkier descriptions
    /// of precise behavior here.
    /// </details>
    record example-api-type {
        /// A description of a field.
        field0: u64,
        /// A description of another field.
        field1: string,
    }

    /// Short function description
    ///
    /// Explanation for developers using the API. This should describe the
    /// arguments which in this function are `arg0`, `arg1`, and `arg2`, and the
    /// return value.
    ///
    /// <details>
    /// <summary>Detailed specification</summary>
    /// Similar to the details section above, this is meant for more rigorous
    /// specification details for implementors. This may explain what a compliant
    /// implementation MUST do, such as never returning an earlier result from a
    /// later call, for example.
    /// </details>
    example-api-function: func(
        arg0: example-api-type,
        arg1: string,
        arg2: example-dep-type,
    ) -> result<example-api-type>
}
